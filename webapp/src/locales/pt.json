{
  "title": "Álan Crístoffer",
  "public": "Público",
  "gpg_public_key": "Chave GPG pública",
  "pt": "Português",
  "en": "Inglês",
  "fr": "Francês",
  "de": "Alemão",
  "native": "Nativo",
  "about_me": "Estudante de engenharia mecatrônica com experiência em análise de sistemas e controle e programação. Adora trabalhar em um ambiente cooperativo para resolver problemas complexos. Trabalhou em duas iniciações científicas para o uso de uma técnica de controle avançado (Model Predictive Control). Adora aprender idiomas e ajudar os outros a desenvolver seus projetos.",
  "languages": "Idiomas",
  "tests_database_desc": "Gerencia um banco de questões e facilita a geração e correção de provas.",
  "tb_ss1_desc": "Este aplicativo foi desenvolvido para o estado de Minas Gerais, para gerenciar as provas aplicadas aos recrutas bem como provas anuais.",
  "tb_ss2_desc": "Ele permite que eles gerem as provas fácilmente, usando uma interface simples, que permite gerar testes personalizados, escolhendo o número e níveis de dificuldade das questões, se serão objetivas ou discursivas e pode embaralhar as questões e respostas, enquanto mantém o gabarito fácil de conferir.",
  "tb_ss3_desc": "As questões podem ser adicionas em um editor de texto rico, que permite a criação de questões estilizadas.",
  "and": "e",
  "cefss_desc": "Código fonte do mínimo necessário para usar o Chromium Embedded Framework versões 1 e 3. Cria uma janela, carrega um arquivo HTML e cria ligações bidirecionais entre Javascript e C++ para mostrar o básico de um aplicativo C++ com interface HTML.",
  "ahio_desc": "ahio é uma biblioteca de comunicação cujo objetivo é facilitar a conexão com vários hardwares de I/O de forma a possibilitar a mudança de hardware com mudanças mínimas de código.",
  "moirai_desc": "Moirai é o backend da plataforma de controle. Ela é desenvolvida como parte do meu projeto de iniciação científica, entitulado Plataformas de baixo custo para controle de processos, desenvolvido no CEFET-MG sob a supervisão do Prof. Dr. Valter Leite. O projeto é desenvolvido através do apoio da FAPEMIG. Controladores para esse projeto são escritos em Python 3 e podem usar qualquer biblioteca disponível no sistema. Ele já depende da NumPy e SciPy, que são comumente utilizadas. A plataforma gerencia a interface com o hardware através da biblioteca ahio. Desta forma, adicionar novos hardwares é tão simples quanto criar um novo driver pra ahio. Tempo de execução, amostragem, leitura de entradas e atualização das saídas são gerenciadas pela aplicação e permitem que você foque no seu controlador/modelo.",
  "lachesis_desc": "Lachesis é o frontend da plataforma de controle. Esta aplicação permite configurar o hardware, executar testes de resposta do sistema e executar controladores com uma interface fácil de usar. Os sinais de entrada e saída utilizados, assim como as variáveis, podem ser vistos graficamente, atualizando em tempo real. Ele funciona apenas como frontend, o que significa que todos os dados são armazenados e gerenciados no/pelo servidor moirai. O servidor também é responsável pela execução do controlador. Isso significa que você pode instalar o moirai em um computador dedicado, como um Raspberry Pi e o Lachesis em outro, usando o Lachesis como um controle remoto para o seu sistema de controle. Isso permite que vários usuários compartilhem a configuração da planta.",
  "lachesis1_desc": "Configurar o hardware é tão fácil quanto preencher um formulário.",
  "lachesis2_desc": "Visualize a forma de onda de controle antes de executar testes de loop aberto.",
  "lachesis3_desc": "Basta escolher o tempo de amostragem, a duração da execução e as entradas. Não precisa se preocupar em lidar com isso. Agora você pode se concentrar no seu controlador, que pode ser escrito em Python 3, uma linguagem de programação moderna e de alto nível.",
  "lachesis4_desc": "Visualize entradas, saídas e variáveis registradas graficamente em tempo real. Quando o teste terminar, os dados podem ser exportados para JSON, CSV e MAT.",
  "tracker_desc": "Aplicativo para rastrear pacotes usando o site dos Correios como backend. Não funciona mais, já que não faz sentido atualizá-lo agora que os Correios têm seu próprio aplicativo. No entanto, o código-fonte é mantido no GitHub para referência.",
  "void_desc": "Void é um armazenamento criptografado. Você pode criptografar/descriptografar arquivos de/para o armazenamento. A criptografia é realizada pelo NSS/NSPR usando AES_GCM_256, SHA512, PKCS5_PBKDF2, HMAC_SHA512 com um custo de 250000. A própria loja tem uma chave derivada de sua senha e cada arquivo tem sua própria chave aleatória também. No disco, todos os arquivos criptografados recebem um nome de hash salgado, com 128 dígitos. Arquivos grandes (50MB) são divididos em partes menores.",
  "void1_desc": "Você pode criptografar arquivos e pastas e até mesmo definir metadados como tags e comentários.",
  "void2_desc": "Arquivos de texto podem ser editados dentro do aplicativo usando o editor Ace, que suporta temas e realce de sintaxe para 161 idiomas.",
  "void3_desc": "Você pode pesquisar arquivos comparando seu caminho, tags e comentários.",
  "void4_desc": "Vídeos podem ser reproduzidos de dentro do aplicativo, sem tocar no disco. As imagens também podem ser exibidas em forma de carrossel.",
  "%d years old, Brazilian": "%d anos, Brasileiro",
  "contacts": "Contatos",
  "skills": "Competências",
  "site_languages": "Idioma da página",
  "$skills": "Análise e Controle de Sistemas, C/C++, Python, Kotlin, Montagem, MATLAB, Desenvolvimento Android, Frontend, Backend, Embarcado, Automação, Robótica",
  "about": "Sobre",
  "resume": "Currículo",
  "projects": "Projetos",
  "publications": "Publicações",
  "experience": "Formação/Experiência",
  "experience_title": "Experiência",
  "education": "Formação"
}